# Copyright (C) 2024-2025 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

ARG CUSTOM_LLVM=false
ARG ROCM_VERSION=6.2

# LLVM Build Stage
FROM registry.access.redhat.com/ubi9/ubi:latest AS llvm-build
ARG CUSTOM_LLVM
USER 0
RUN if [ "$CUSTOM_LLVM" = "true" ]; then \
        dnf update -y && \
        dnf -y install clang rpm-build git ninja-build cmake lld && \
        git clone https://github.com/llvm/llvm-project && \
        cd llvm-project && \
        COMMIT=$(curl -s https://raw.githubusercontent.com/triton-lang/triton/refs/heads/main/cmake/llvm-hash.txt) && \
        git checkout $COMMIT && \
        mkdir build && cd build && \
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON ../llvm \
              -DLLVM_ENABLE_PROJECTS="mlir;llvm" -DLLVM_TARGETS_TO_BUILD="host;NVPTX;AMDGPU" && \
        ninja && \
        dnf clean all && rm -rf /var/cache/dnf /tmp/*; \
    else \
        echo "Skipping LLVM build because CUSTOM_LLVM is not true"; \
    fi

# gosu Installation Stage
FROM registry.access.redhat.com/ubi9/ubi-minimal:latest AS gosu
ENV GOSU_VERSION=1.17
RUN microdnf update -y && \
    microdnf install -y wget && \
    microdnf clean all && rm -rf /var/cache/dnf
RUN set -eux; \
    rpmArch="$(rpm --query --queryformat='%{ARCH}' rpm)"; \
    case "$rpmArch" in \
        aarch64) dpkgArch='arm64' ;; \
        armv[67]*) dpkgArch='armhf' ;; \
        i[3456]86) dpkgArch='i386' ;; \
        ppc64le) dpkgArch='ppc64el' ;; \
        riscv64 | s390x) dpkgArch="$rpmArch" ;; \
        x86_64) dpkgArch='amd64' ;; \
        *) echo >&2 "error: unknown/unsupported architecture '$rpmArch'"; exit 1 ;; \
    esac; \
    wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
    chmod +x /usr/local/bin/gosu && \
    rm -rf /var/cache/dnf /tmp/*

# Base Stage with ROCm Installation
FROM registry.access.redhat.com/ubi9/python-311 AS base
ARG ROCM_VERSION=6.2
USER 0

# Set environment variables for ROCm
ENV LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 \
    ROCM_PATH=/opt/rocm \
    LD_LIBRARY_PATH=/usr/lib64:/usr/lib:/opt/rocm/lib:/opt/rocm/llvm/lib \
    PATH=/opt/rocm/bin:/opt/rocm/llvm/bin:$PATH

# Install the ROCm rpms
RUN echo "[ROCm]" > /etc/yum.repos.d/rocm.repo && \
    echo "name=ROCm" >> /etc/yum.repos.d/rocm.repo && \
    echo "baseurl=https://repo.radeon.com/rocm/rhel9/$ROCM_VERSION/main" >> /etc/yum.repos.d/rocm.repo && \
    echo "enabled=1" >> /etc/yum.repos.d/rocm.repo && \
    echo "gpgcheck=0" >> /etc/yum.repos.d/rocm.repo && \
    dnf install -y llvm clang clang-libs lld && \
    dnf install -y --nodocs --setopt=install_weak_deps=False \
        amd-smi-lib \
        amd-smi \
        miopen-hip \
        rocm-core \
        rocm-hip-libraries \
        rocminfo && \
    dnf clean all && rm -rf /var/cache/yum

# LLVM Integration Stages
FROM base AS llvm-local-true
COPY --from=llvm-build /llvm-project/ /llvm-project/

FROM base AS llvm-local-false
ENV TRITON_OFFLINE_BUILD=NO

# Final Stage
FROM llvm-local-${CUSTOM_LLVM} AS final
ARG ROCM_VERSION=6.2
ENV PYTHON_VERSION=3.11 \
    PATH=$HOME/.local/bin/:$PATH \
    PYTHONUNBUFFERED=1 \
    AMD=true \
    ROCM_VERSION=$ROCM_VERSION

WORKDIR /opt
RUN echo 'export LD_LIBRARY_PATH=/usr/lib64:$LD_LIBRARY_PATH' >> ~/.bashrc
RUN echo "export MAX_JOBS=$(nproc --all)" >> "${HOME}"/.bashrc
COPY --from=gosu /usr/local/bin/gosu /usr/local/bin/gosu
COPY user.sh user.sh
COPY entrypoint.sh /entrypoint.sh
COPY hack/triton-gpu-check.py triton-gpu-check.py
COPY examples/triton-vector-add-rocm.py triton-vector-add-rocm.py
ENTRYPOINT ["/entrypoint.sh"]
CMD ["tail", "-f", "/dev/null"]
